import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np
from scipy import signal
from palettable.colorbrewer import qualitative
import itertools
import pandas as pd

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import (ContextGroup, EnumParameter, OrderedContextMeta,
                             Parameter, SequenceSelector)

from psi.controller.api import ExperimentAction

from psiaudio.util import (phase, psd, psd_freq, db, dbi, golay_pair,
                           summarize_golay, golay_tf, octave_space)

from psi.controller.api import (ControllerManifest, ExtractEpochs, Input,
                                QueuedEpochOutput)

from psi.controller.calibration.tone import tone_sens

from psi.token.primitives import Chirp

from psi.data.sinks.api import BinaryStore, EpochCounter, TextStore

from psi.data.plots import (EpochTimeContainer, ChannelPlot,
                            GroupedEpochAveragePlot, ChannelPlot, ViewBox,
                            FFTContainer, GroupedEpochFFTPlot)

from psiaudio.calibration import FlatCalibration, InterpCalibration


from .calibration_mixins import ChirpMixin, GolayMixin, level_to_gain

from psi.paradigms.core.io_mixins import ChannelInput


def calculate_sens(workbench, grouping, filename, calc_sens):
    core = workbench.get_plugin('enaml.workbench.core')
    context = workbench.get_plugin('psi.context')
    data = workbench.get_plugin('psi.data')
    controller = workbench.get_plugin('psi.controller')

    measurement_source = data.find_source('measurement_microphone')
    generic_source = data.find_source('system_microphone')
    epoch_info = data.find_source('generic_epoch')

    duration = epoch_info.iloc[0].loc['epoch_size']
    measurement_df = measurement_source.get_epochs(epoch_info, offset=0,
                                                   duration=duration,
                                                   columns=grouping)
    generic_df = generic_source.get_epochs(epoch_info, offset=0,
                                           duration=duration, columns=grouping)

    measurement_grouped = measurement_df.groupby(grouping)
    generic_grouped = generic_df.groupby(grouping)
    groups = sorted(measurement_grouped.groups.keys())

    n = max(3, len(groups))
    cmap_name = 'Dark2_{}'.format(n)
    cmap = getattr(qualitative, cmap_name)
    colors = itertools.cycle(cmap.colors)

    summaries = []
    keys = []
    for key, color in zip(groups, colors):
        name = '{}'.format(key)
        sens_summary = calc_sens(
            fs=measurement_source.fs,
            measurement_waveform=measurement_grouped.get_group(key).values,
            generic_waveform=generic_grouped.get_group(key).values,
            color=color,
            context=context,
            data=data,
            name=name,
            measurement_cal=controller.get_input('measurement_microphone').calibration,
        )
        sens_summary = pd.DataFrame(sens_summary)
        sens_summary.set_index('frequency', inplace=True)
        summaries.append(sens_summary)
        keys.append(key)

    result = pd.concat(summaries, keys=keys, names=grouping)
    parameters = {'name': filename, 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)
    return result


def calculate_sens_chirp(event):
    result = calculate_sens(event.workbench, ['hw_ao_chirp_level'],
                            'chirp_sens', calculate_group_sens_chirp)
    max_gain = result.index.get_level_values('hw_ao_chirp_level').max()
    validate_sens(event, result.loc[max_gain].reset_index())


def calculate_sens_golay(event):
    result = calculate_sens(event.workbench, ['n_bits', 'output_gain'],
                            'golay_sens', calculate_group_sens_golay)
    max_n = result.index.get_level_values('n_bits').max()
    max_gain = result.index.get_level_values('output_gain').max()
    validate_sens(event, result.loc[max_n, max_gain].reset_index())


def calculate_group_sens_chirp(fs, measurement_waveform, generic_waveform, color, context,
                               data, name, measurement_cal):

    smoothing_window = context.get_value('smoothing_window')

    freq = psd_freq(measurement_waveform, fs)
    measurement_psd = np.mean(psd(measurement_waveform, fs), axis=0)
    generic_psd = np.mean(psd(generic_waveform, fs), axis=0)
    measurement_phase = np.mean(phase(measurement_waveform, fs), axis=0)
    generic_phase = np.mean(phase(generic_waveform, fs), axis=0)

    # Determine actual stim level using measurement microphone.
    spl = dbi(measurement_cal.get_db(freq, measurement_psd))

    # Calibration units should be SPL/V
    sens = spl - db(generic_psd)

    d_phase = measurement_phase - generic_phase

    if smoothing_window > 0:
        w = signal.windows.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')

    measurement_summary = {
        'frequency': freq,
        'psd': measurement_psd,
    }

    generic_summary = {
        'frequency': freq,
        'psd': generic_psd,
    }

    sens_summary = {
        'frequency': freq,
        'sens': sens,
        'phase': d_phase,
    }

    def plot_data(data=data, measurement_summary=measurement_summary,
                  generic_summary=generic_summary, sens_summary=sens_summary,
                  color=color, name=name):
        vb = data.find_viewbox('measurement_fft')
        vb.plot(measurement_summary['frequency'], db(measurement_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('generic_fft')
        vb.plot(generic_summary['frequency'], db(generic_summary['psd']),
                color, log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def calculate_group_sens_golay(fs, measurement_waveform, generic_waveform,
                               color, context, data, name, meas_cal):
    n_bits = context.get_value('n_bits')
    n_fft = context.get_value('fft_averages')
    n_waveforms = context.get_value('waveform_averages')
    n_discard = context.get_value('discard')
    smoothing_window = context.get_value('smoothing_window')

    a, b = golay_pair(n_bits)

    n = n_waveforms * n_fft + n_discard

    measurement_a, measurement_b = measurement_waveform[n_discard:n], measurement_waveform[n+n_discard:]
    measurement_summary = summarize_golay(fs, a, b, measurement_a, measurement_b, n_waveforms)

    generic_a, generic_a = generic_waveform[n_discard:n], generic_waveform[n+n_discard:]
    generic_summary = summarize_golay(fs, a, b, generic_summary, generic_summary, n_waveforms)

    measurement_psd = measurement_summary['psd']
    generic_psd = cal_summary['psd']
    measurement_phase = measurement_summary['phase']
    generic_phase = cal_summary['phase']

    # divide cal mic volts by cal mic sens (in V/Pa) to get pascals
    pa = db(generic_psd) - db(meas_sens)
    # cal units should be dB(Pa/20e-6/V)
    sens = pa - db(20e-6) - db(measurement_psd)
    phase = measurement_phase - generic_phase

    if smoothing_window > 0:
        w = signal.windows.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')
        phase = np.convolve(phase, w, mode='same')

    sens_summary = {
        'frequency': measurement_summary['frequency'],
        'sens': sens,
        'phase': phase,
    }

    def plot_data(data=data, measurement_summary=measurement_summary, generic_summary=cal_summary,
                  sens_summary=sens_summary, color=color, name=name):
        vb = data.find_viewbox('measurement_fft')
        vb.plot(measurement_summary['frequency'], db(measurement_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('generic_fft')
        vb.plot(generic_summary['frequency'], db(cal_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def validate_sens(event, sens):
    controller = event.workbench.get_plugin('psi.controller')
    context = event.workbench.get_plugin('psi.context')
    data = event.workbench.get_plugin('psi.data')
    core = event.workbench.get_plugin('enaml.workbench.core')

    ao = controller.get_output('system_output').channel
    measurement_ai = controller.get_input('system_microphone').channel
    measurement_ai.calibration = InterpCalibration(sens['frequency'], sens['sens'])

    generic_ai = controller.get_input('cal_microphone').channel
    generic_mic_sens = cal_ai.calibration.to_mv_pa() * 1e-3

    validation_level = context.get_value('validation_level')
    safe_gain = context.get_value('safe_gain')
    freq_lb = context.get_value('validation_start')
    freq_ub = context.get_value('validation_end')
    octaves = context.get_value('validation_octaves')

    frequencies = octave_space(freq_lb*1e-3, freq_ub*1e-3, octaves,
                               'bounded')*1e3
    log.debug('Validating calibration by targeting %f dB SPL', validation_level)
    if len(frequencies) == 0:
        log.error('No frequencies available to calibrate. Please review target SPL.')
        return

    # TODO: NEED TO ORDER CHANNELS!
    engines = [ao.engine, generic_ai.engine, measurement_ai.engine]
    ai_channels = [generic_ai.name, measurement_ai.name]
    result = tone_sens(engines,
                       frequencies,
                       gains=-30,
                       ao_channel_name=ao.name,
                       ai_channel_names=ai_channels)
    rms = result['rms'].unstack('channel_name')
    measurement_rms = rms[measurement_ai.name]
    generic_rms = rms[cal_ai.name]
    sens = db(generic_rms) - db(cal_mic_sens) - db(20e-6) - db(measurement_rms)

    def plot_data(data=data, sens=sens):
        vb = data.find_viewbox('sens')
        vb.plot(sens.index, sens.values, log_x=True, kind='scatter')

    deferred_call(plot_data)
    parameters = {'name': 'tone_sensitivity', 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)


enamldef GenericMicCalibrationManifest(ControllerManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'mic_data'
            continuous_inputs = ['measurement_microphone',
                                 'system_microphone']

        TextStore:
            name = 'generic_data'
            epoch_inputs = ['generic_epoch']

        EpochCounter: counter:
            name = 'epoch_counter'
            label = 'Trials acquired'
            source_name = 'measurement_epoch'
            output_name = 'hw_ao'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ExtractEpochs:
            name = 'measurement_epoch'
            source_name = 'measurement_microphone'

        ExtractEpochs:
            name = 'generic_epoch'
            source_name = 'system_microphone'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'
    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        SequenceSelector:
            name = 'default'
            label = 'Sequence'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'measurement_epoch_queue_end'
            command = 'psi.controller.stop'
            delay = 1

        ExperimentAction:
            event = 'experiment_start'
            command = 'hw_ao.start'
            kwargs = {'delay': 1}
            weight = 60

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        EpochTimeContainer:
            name = 'epoch_container_signal'
            label = 'Epoch average (signal)'
            span = 0.01
            name = 'epoch_container'

            ViewBox:
                y_min = -0.1
                y_max = 0.1
                y_label = 'Generic mic. signal (V)'
                name = 'measurement_epoch_view'

                GroupedEpochAveragePlot:
                    label = 'Generic epoch average plot'
                    source_name = 'measurement_epoch'
                    pen_color_cycle = ['black', 'red']
                    plot_grouping << C.get_names()

            ViewBox:
                y_min = -0.01
                y_max = 0.01
                y_label = 'Cal. mic. signal (V)'
                name = 'generic_epoch_view'

                GroupedEpochAveragePlot:
                    label = 'Cal. epoch average plot'
                    source_name = 'generic_epoch'
                    pen_color_cycle = ['black', 'red']
                    plot_grouping << C.get_names()

        FFTContainer:
            name = 'calibration_result'
            label = 'Calibration result'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'measurement_fft'
                y_label = 'Probe tube PSD (dB re 1V)'

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'generic_fft'
                y_label = 'Calibration mic. PSD (dB re 1V)'

            ViewBox:
                name = 'sens'
                y_label = 'Probe tube sens (V/Pa)'


enamldef GenericMicGolayMixin(GolayMixin): manifest:

    extract_epoch_inputs = ['measurement_epoch', 'generic_epoch']
    cleanup_cb = calculate_sens_golay


enamldef GenericMicChirpMixin(ChirpMixin): manifest:

    extract_epoch_inputs = ['measurement_epoch', 'generic_epoch']
    cleanup_cb = calculate_sens_chirp
