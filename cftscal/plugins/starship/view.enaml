import numpy as np

from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox, AreaLayout, HSplitLayout, VSplitLayout
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (
    Container, DockArea, DockItem, Field, Label, ObjectCombo, PushButton
)

from psi.data.plots_manifest import PGCanvas

from cftscal.objects import CFTSStarshipLoader, starship_manager
from cftscal.plugins.widgets import (
    AddItem, CalibratedObjects, BasePlotManager, ObjectCollection,
)

cfts_starship_loader = CFTSStarshipLoader()


class StarshipPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color, plot = self.create_plot()
        pen = pg.mkPen(color, width=2)
        plot = pg.PlotCurveItem(pen=pen)
        cal = calibration.load()
        x = np.log10(cal.frequency[1:])
        y = cal.sensitivity[1:]
        plot.setData(x, y)
        return color, plot


enamldef StarshipView(Container):

    attr settings

    DockArea: area:
        layout = AreaLayout(
            HSplitLayout(
                VSplitLayout(
                    'settings_starship',
                    TabLayout(*[di.name for di in children if 'output' in di.name]),
                    'starship_list',
                    sizes=[25, 200],
                ),
                'starship_sens_plot',
                sizes=[150, 900],
            ),
        )
        DockItem:
            name = 'settings_starship'
            title = 'Starship'
            closable = False
            stretch = 0


            Looper:
                iterable << settings

                DockItem:
                    name = f'settings_output_{loop_item.output}'
                    title = f'Output {loop_item.output}'
                    closable = False
                    stretch = 0

                    attr settings = loop_item

                    Container:
                        constraints = [
                            vbox(
                                hbox(
                                    starship_label,
                                    hbox(starship_select, starship_add, starship_gain, spacing=0),
                                    starship_gain_label,
                                    spacer(0),
                                    hbox(golay_start, chirp_start, spacing=0),
                                    spacing=5,
                                ),
                                hbox(inear_label,
                                     hbox(inear_select, inear_add, spacing=0),
                                     spacer(0),
                                     inear_start),
                                spacing=5,
                            ),
                            starship_add.width == 25,
                            inear_add.width == 25,
                            align('width', starship_select, inear_select),
                            align('left', starship_label, inear_label),
                            align('left', starship_select, inear_select),
                            align('left', golay_start, inear_start),
                            align('right', chirp_start, inear_start),
                            align('v_center', starship_label, starship_select,
                                  starship_add, starship_gain,
                                  starship_gain_label, golay_start,
                                  chirp_start),
                            align('v_center', inear_label, inear_select, inear_add, inear_start),
                        ]

                        Label: starship_label:
                            text = 'Starship'

                        ObjectCombo: starship_select:
                            items = sorted(o.name for o in starship_manager.list_objects())
                            selected := settings.starship

                        PushButton: starship_add:
                            text = '+'
                            clicked ::
                                popup = AddItem(self, combo=starship_select, label='Starship')
                                popup.show()

                        ObjectCombo: starship_gain:
                            items = [20, 40]
                            selected := settings.starship_gain

                        Label: starship_gain_label:
                            text = 'dB gain'

                        PushButton: golay_start:
                            text = 'Golay'
                            enabled << bool(mic_settings.microphone) \
                                and bool(settings.starship) \
                                and '(' not in settings.starship
                            clicked ::
                                settings.run_pt_cal_golay(mic_settings)
                                starship_tree.collection.update_groups()

                        PushButton: chirp_start:
                            text = 'Chirp'
                            enabled << bool(mic_settings.microphone) \
                                and bool(settings.starship) \
                                and '(' not in settings.starship
                            clicked ::
                                settings.run_pt_cal_chirp(mic_settings)
                                starship_tree.collection.update_groups()

        DockItem:
            name = 'starship_sens_plot'
            title = 'Starship Sensitivity'
            closable = False
            stretch = 10

            Container:
                PGCanvas: starship_plot:
                    attr manager = StarshipPlotManager()
                    component << manager.component

        DockItem:
            name = 'starship_list'
            title = 'Starship Calibrations'
            closable = False
            stretch = 0

            CalibratedObjects: starship_tree:
                headers = ['Name', 'Sens', 'Pistonphone']
                collection = ObjectCollection(
                    starship_manager, starship_plot.manager
                )
