import numpy as np

from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox, AreaLayout, HSplitLayout, TabLayout, VSplitLayout
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (
    Container, DockArea, DockItem, Field, Label, ObjectCombo, PushButton
)

from psi.data.plots_manifest import PGCanvas

from cftscal.objects import speaker_manager
from cftscal.plugins.widgets import (
    AddItem, CalibratedObjects, BasePlotManager, ObjectCollection,
)


class SpeakerPlotManager(BasePlotManager):

    def make_plot(self, calibration):
        color, plot = self.create_plot()
        cal = calibration.load()
        x = np.log10(cal.frequency[1:])
        y = cal.sensitivity[1:]
        plot.setData(x, y)
        return color, plot


enamldef SpeakerView(Container):

    attr settings

    DockArea: area:
        layout = AreaLayout(
            HSplitLayout(
                VSplitLayout(
                    'settings_mic',
                    TabLayout(*[di.name for di in children if 'output' in di.name]),
                    'speaker_list',
                    sizes=[25, 200],
                ),
                'speaker_sens_plot',
                sizes=[150, 900],
            ),
        )

        DockItem:
            name = 'settings_mic'
            title = 'Microphone'
            closable = False
            stretch = 0

            Container:
                constraints = [
                    hbox(
                        mic_label,
                        hbox(mic_select, mic_gain, spacing=0),
                        mic_gain_label,
                        spacer(0),
                        spacing=5,
                    ),
                    align('v_center', mic_label, mic_select, mic_gain, mic_gain_label),
                ]

                Label: mic_label:
                    text = 'Microphone'

                ObjectCombo: mic_select:
                    items = sorted(settings.microphone.available_microphones)
                    selected := settings.microphone.name

                ObjectCombo: mic_gain:
                    items = [-20, -10, 0, 10, 20, 30, 40, 50]
                    selected := settings.microphone.gain

                Label: mic_gain_label:
                    text = 'dB gain'

        Looper:
            iterable << settings.speakers

            DockItem:
                name = f'settings_output_{loop_item.output}'
                title = f'Output {loop_item.output}'
                closable = False
                stretch = 0

                attr speaker = loop_item
                attr mic_settings = settings.microphone

                Container:
                    constraints = [
                        hbox(
                            speaker_label,
                            hbox(speaker_select, speaker_add, spacing=0),
                            spacer(0),
                            hbox(golay_start, chirp_start, spacing=0),
                            spacing=5,
                        ),
                        speaker_add.width == 25,
                        align('v_center', speaker_label, speaker_select,
                                speaker_add, golay_start, chirp_start),
                    ]

                    Label: speaker_label:
                        text = 'Speaker'

                    ObjectCombo: speaker_select:
                        items = speaker.available_speakers
                        selected := speaker.name

                    PushButton: speaker_add:
                        text = '+'
                        clicked ::
                            popup = AddItem(self, combo=speaker_select, label='Speaker')
                            popup.show()

                    PushButton: golay_start:
                        text = 'Golay'
                        enabled << bool(mic_settings.name) \
                            and bool(speaker.name) \
                            and '(' not in speaker.name
                        clicked ::
                            speaker.run_cal_golay(mic_settings)
                            speaker_tree.collection.update_groups()

                    PushButton: chirp_start:
                        text = 'Chirp'
                        enabled << bool(mic_settings.name) \
                            and bool(speaker.name) \
                            and '(' not in speaker.name
                        clicked ::
                            speaker.run_cal_chirp(mic_settings)
                            speaker_tree.collection.update_groups()

        DockItem:
            name = 'speaker_sens_plot'
            title = 'Speaker Sensitivity'
            closable = False
            stretch = 10

            Container:
                PGCanvas: speaker_plot:
                    attr manager = SpeakerPlotManager()
                    component << manager.component

        DockItem:
            name = 'speaker_list'
            title = 'Speaker Calibrations'
            closable = False
            stretch = 0

            CalibratedObjects: speaker_tree:
                headers = ['Name', 'Microphone']
                collection = ObjectCollection(
                    speaker_manager, speaker_plot.manager
                )
